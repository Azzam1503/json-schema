import type { Json } from "@hyperjump/json-pointer";
import type { Core as _Core } from "./core";
import type { Configuration as _Configuration } from "./configuration";
import type { Instance as _Instance } from "./instance";
import type { InvalidSchemaError as _InvalidSchemaError } from "./invalid-schema-error";
import type { Keywords as _Keywords, Keyword } from "./keywords";
import type { Schema as _Schema } from "./schema";


export type JsonSchemaValidator = {
  add: _Schema["add"];
  get: _Schema["get"];
  validate: _Core["validate"];
  compile: _Core["compile"];
  interpret: _Core["interpret"];
  setMetaOutputFormat: _Configuration["setMetaOutputFormat"];
  getMetaOutputFormat: _Configuration["getMetaOutputFormat"];
  setShouldMetaValidate: _Configuration["setShouldMetaValidate"];
  getShouldMetaValidate: _Configuration["getShouldMetaValidate"];
  setUnstableKeywordEnabled: _Configuration["setUnstableKeywordEnabled"];
  isUnstableKeywordEnabled: _Configuration["isUnstableKeywordEnabled"];
  addMediaTypePlugin: _Core["addMediaTypePlugin"];
  FLAG: _Core["FLAG"];
  BASIC: _Core["BASIC"];
  DETAILED: _Core["DETAILED"];
  VERBOSE: _Core["VERBOSE"];
  InvalidSchemaError: _InvalidSchemaError;
  Keywords: _Keywords;
  Schema: _Schema;
  Instance: _Instance;
  Validate: Keyword;
};

export const add: JsonSchemaValidator["add"];
export const get: JsonSchemaValidator["get"];
export const validate: JsonSchemaValidator["validate"];
export const compile: JsonSchemaValidator["compile"];
export const interpret: JsonSchemaValidator["interpret"];
export const setMetaOutputFormat: JsonSchemaValidator["setMetaOutputFormat"];
export const getMetaOutputFormat: JsonSchemaValidator["getMetaOutputFormat"];
export const setShouldMetaValidate: JsonSchemaValidator["setShouldMetaValidate"];
export const getShouldMetaValidate: JsonSchemaValidator["getShouldMetaValidate"];
export const setUnstableKeywordEnabled: JsonSchemaValidator["setUnstableKeywordEnabled"];
export const isUnstableKeywordEnabled: JsonSchemaValidator["isUnstableKeywordEnabled"];
export const addMediaTypePlugin: JsonSchemaValidator["addMediaTypePlugin"];
export const FLAG: JsonSchemaValidator["FLAG"];
export const BASIC: JsonSchemaValidator["BASIC"];
export const DETAILED: JsonSchemaValidator["DETAILED"];
export const VERBOSE: JsonSchemaValidator["VERBOSE"];
export const InvalidSchemaError: JsonSchemaValidator["InvalidSchemaError"];
export const Keywords: JsonSchemaValidator["Keywords"];
export const Schema: JsonSchemaValidator["Schema"];
export const Instance: JsonSchemaValidator["Instance"];
export const Validate: JsonSchemaValidator["Validate"];

export type JsonSchema = boolean | {
  $schema?: "https://json-schema.org/validation";
  $id?: string;
  $anchor?: string;
  $ref?: string;
  $dynamicRef?: string;
  $dynamicAnchor?: string;
  $vocabulary?: Record<string, boolean>;
  $comment?: string;
  $defs?: Record<string, JsonSchema>;
  additionalItems?: JsonSchema;
  unevaluatedItems?: JsonSchema;
  prefixItems?: JsonSchema[];
  items?: JsonSchema;
  contains?: JsonSchema;
  additionalProperties?: JsonSchema;
  unevaluatedProperties?: JsonSchema;
  properties?: Record<string, JsonSchema>;
  patternProperties?: Record<string, JsonSchema>;
  dependentSchemas?: Record<string, JsonSchema>;
  propertyNames?: JsonSchema;
  if?: JsonSchema;
  then?: JsonSchema;
  else?: JsonSchema;
  allOf?: JsonSchema[];
  anyOf?: JsonSchema[];
  oneOf?: JsonSchema[];
  not?: JsonSchema;
  multipleOf?: number;
  maximum?: number;
  exclusiveMaximum?: number;
  minimum?: number;
  exclusiveMinimum?: number;
  maxLength?: number;
  minLength?: number;
  pattern?: string;
  maxItems?: number;
  minItems?: number;
  uniqueItems?: boolean;
  maxContains?: number;
  minContains?: number;
  maxProperties?: number;
  minProperties?: number;
  required?: string[];
  dependentRequired?: Record<string, string[]>;
  const?: Json;
  enum?: Json[];
  type?: JsonSchemaType | JsonSchemaType[];
  title?: string;
  description?: string;
  default?: Json;
  deprecated?: boolean;
  readOnly?: boolean;
  writeOnly?: boolean;
  examples?: Json[];
  format?: "date-time" | "date" | "time" | "duration" | "email" | "idn-email" | "hostname" | "idn-hostname" | "ipv4" | "ipv6" | "uri" | "uri-reference" | "iri" | "iri-reference" | "uuid" | "uri-template" | "json-pointer" | "relative-json-pointer" | "regex";
  contentMediaType?: string;
  contentEncoding?: string;
  contentSchema?: JsonSchema;
};

export type JsonSchemaType = "object" | "array" | "string" | "number" | "integer" | "boolean" | "null";

export * from "./core";
export * from "./keywords";
export * from "./schema";
export * from "./instance";

declare const jsonSchema: JsonSchemaValidator;
export default jsonSchema;
